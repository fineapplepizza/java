package project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class Controller {

	Connection conn = null;
	PreparedStatement psmt = null;
	ResultSet rs = null;
	int cnt = 0;

	// bookManagementVO에 대한 객체 생성
//	memberVO vo = null;
	bookManagementVO vo1 = null;

	// 1.mysql동적연결
	public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost/library", "root", "");
		} catch (ClassNotFoundException e) {
			System.out.println("동적연결오류");
			e.printStackTrace();
		} catch (SQLException e) {
			System.out.println("SQL문오류");
			e.printStackTrace();
		}
	}// connect()종료

	// 객체의 연결을 종료하는 메소드
	public void close() {
		try {
			if (rs != null) {
				rs.close();
			}
			if (psmt != null) {
				psmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			System.out.println("SQL문오류");
			e.printStackTrace();
		}
	}// close()종료
		// 도서추가를 위한 메소드 -insert()

	public int book_insert(String name, String author, String publisher, String image, String story, int borrow_book) {
		connect();// 데이터베이스 연결

		// sql문 넘기기

		try {
			String sql = "insert into book values(?,?,?,?,?,?)";
			psmt = conn.prepareStatement(sql);

			System.out.println("sql전송");

			// 셋팅값 설정
			psmt.setString(1, name);
			psmt.setString(2, author);
			psmt.setString(3, publisher);
			psmt.setString(4, image);
			psmt.setString(5, story);
			psmt.setInt(6, borrow_book);
            
			// 테이블의 변화를 실행해주는 메소드 executeUpdate()
			cnt = psmt.executeUpdate();
			
			
		} catch (SQLException e) {
			System.out.println("SQL문오류");
			e.printStackTrace();
		}

		// 객체 닫아주기
		finally {
			close();
		}
		return cnt;
	}// insert();
	


	// 도서조회 selectAll()
	public ArrayList<bookManagementVO> book_selectAll() {
		// 테이블로부터 한 줄 씩 읽어오는 내용들을 저장하기 위해 ArrayList
		ArrayList<bookManagementVO> list = new ArrayList<>();
		// 1.동적로딩,데이터베이스 연결
		connect();
		// 2.전체조회 sql문 작성

		// sql을 psmt에 담아주기
		try {
			String sql = "select* from book";
			psmt = conn.prepareStatement(sql);
			// 테이블을 조회/검색 실행시켜주기 위한 메소드 executeQuery()사용하기
			// 검색된 내용을 console에 출력하기 위한 메소드 ResultSet 사용하기
			rs = psmt.executeQuery();
			// 3.rs객체를 통해 각 컬럼 값 가져오기 ->rs.get(index)
			while (rs.next()) {
				String name = rs.getString(1);
				String author = rs.getString(2);
				String publisher = rs.getString(3);
				String image = rs.getString(4);
				String story = rs.getString(5);
				int borrow_book = rs.getInt(6);
				
				// 4.생성자 메소드에 다시 전달
				vo1 = new bookManagementVO(name, author, publisher, image, story, borrow_book);
				// 5.ArrayList에 생성내용 추가 -> add()
				list.add(vo1);
			}
		} catch (SQLException e) {
			System.out.println("SQL오류");
			e.printStackTrace();
		} finally {
			close();
		}
		return list;

	}//selectAll()종료
	
	public ArrayList<bookManagementVO> search(String searchbook) {
		ArrayList<bookManagementVO> list = new ArrayList<>();
		connect();
		
		try {
			String sql ="select * from book where name like %?%";
			psmt = conn.prepareStatement(sql);
			psmt.setString(1, searchbook);
			rs = psmt.executeQuery();
			while(rs.next()) {
				String name = rs.getString(1);
				String author = rs.getString(2);
				String publisher = rs.getString(3);
				int borrow_book = rs.getInt(4);
				vo1= new bookManagementVO(name,author,publisher,borrow_book);
				list.add(vo1);
			}
			
			
		} catch (SQLException e) {
			System.out.println("sql문오류");
			e.printStackTrace();
		}		
		finally {
			close();
		}
		return list;	
	}//search()종료
	
	public int book_update(String name, String author, String publisher, String image, String story, int borrow_book) {
		//동적연결
		connect();
		//sql문 
		
		try {
			String sql = "update book set name = ? where author = ? and publisher =? and image =? and story and borrow_book";
			PreparedStatement psmt =  conn.prepareStatement(sql);
			psmt.setString(1, name);
			psmt.setString(2, author);
			psmt.setString(3, publisher);
			psmt.setString(4, image);
			psmt.setString(5, story);
			psmt.setInt(6, borrow_book);
			
			cnt = psmt.executeUpdate();
			if(cnt>1) {
				System.out.println("수정성공");
			}else {
				System.out.println("수정실패");
			}
		} catch (SQLException e) {
			System.out.println("SQL문오류");
			e.printStackTrace();
		}
		finally {
			close();
		}
		
		return cnt;
	}
	

//	public int member_insert(String name, String id, String pw, String address) {
//	connect();// 데이터베이스 연결
//
//	// sql문 넘기기
//
//	try {
//		String sql = "insert into member values(?,?,?,?)";
//		psmt = conn.prepareStatement(sql);
//
//		System.out.println("sql전송");
//
//		// 셋팅값 설정
//		psmt.setString(1, name);
//		psmt.setString(2, id);
//		psmt.setString(3, pw);
//		psmt.setString(4, address);
//
//
//		// 테이블의 변화를 실행해주는 메소드 executeUpdate()
//		cnt = psmt.executeUpdate();
//		System.out.println(sql);
//	} catch (SQLException e) {
//		System.out.println("SQL문오류");
//		e.printStackTrace();
//	}
//
//	// 객체 닫아주기
//	finally {
//		close();
//	}
//	return cnt;
//}// insert();
	
	

//	public ArrayList<memberVO> member_selectAll() {
//		// 테이블로부터 한 줄 씩 읽어오는 내용들을 저장하기 위해 ArrayList
//		ArrayList<memberVO> list = new ArrayList<>();
//		// 1.동적로딩,데이터베이스 연결
//		connect();
//		// 2.전체조회 sql문 작성
//
//		// sql을 psmt에 담아주기
//		try {
//			String sql = "select* from member";
//			psmt = conn.prepareStatement(sql);
//			// 테이블을 조회/검색 실행시켜주기 위한 메소드 executeQuery()사용하기
//			// 검색된 내용을 console에 출력하기 위한 메소드 ResultSet 사용하기
//			rs = psmt.executeQuery();
//			// 3.rs객체를 통해 각 컬럼 값 가져오기 ->rs.get(index)
//			while (rs.next()) {
//				String name = rs.getString(1);
//				String id = rs.getString(2);
//				String pw = rs.getString(3);
//				String address = rs.getString(4);
//				
//				// 4.생성자 메소드에 다시 전달
//				vo = new memberVO(name, id, pw, address);
//				// 5.ArrayList에 생성내용 추가 -> add()
//				list.add(vo);
//			}
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			close();
//		}
//		return list;
//
//	}//selectAll()종료
	
//	public int delete_member(String name) {
//		
//		String s;
//		s = name;
//		
//		connect();
//
//		
//		String sql = "delete from member where name = ?";
//		
//		try {
//			psmt = conn.prepareStatement(sql);
//			
//			psmt.setString(1, name);
//			
//			System.out.println("이름 출력 : " + name);
//			
//			cnt = psmt.executeUpdate();
//			
//			System.out.println(sql);
//			
//			if(cnt >0) {
//				
//				JOptionPane.showMessageDialog(null, "삭제성공");
//			}else {
//				JOptionPane.showMessageDialog(null,"삭제실패");
//				
//			}
//			
//			
//			
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		finally {
//			close();
//		}
//		return cnt;
//		// 객체 닫아주기
//
//	}// insert();	
		
	
	

		
//		public ArrayList<memberVO> member_search_select(String name) {
//			// 테이블로부터 한 줄 씩 읽어오는 내용들을 저장하기 위해 ArrayList
//			ArrayList<memberVO> list = new ArrayList<>();
//			// 1.동적로딩,데이터베이스 연결
//			connect();
//			// 2.전체조회 sql문 작성
//
//			// sql을 psmt에 담아주기
//			try {
//				String sql = "select* from member";
//				psmt = conn.prepareStatement(sql);
//				// 테이블을 조회/검색 실행시켜주기 위한 메소드 executeQuery()사용하기
//				// 검색된 내용을 console에 출력하기 위한 메소드 ResultSet 사용하기
//				rs = psmt.executeQuery();
//				// 3.rs객체를 통해 각 컬럼 값 가져오기 ->rs.get(index)
//				while (rs.next()) {
//					String name = rs.getString(1);
//					String id = rs.getString(2);
//					String pw = rs.getString(3);
//					String address = rs.getString(4);
//					
//					// 4.생성자 메소드에 다시 전달
//					vo = new memberVO(name, id, pw, address);
//					// 5.ArrayList에 생성내용 추가 -> add()
//					list.add(vo);
//				}
//			} catch (SQLException e) {
//				e.printStackTrace();
//			} finally {
//				close();
//			}
//			return list;
//
//		}//selectAll()종료
//		
		
		
	
		
		
	}



